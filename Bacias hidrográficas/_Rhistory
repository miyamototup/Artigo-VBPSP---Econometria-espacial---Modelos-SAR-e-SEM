cores=as.character((c("palegreen","greenyellow","green2","springgreen3","olivedrab3","darkgreen")))
legend(x=-56,y=-30, legenda, fill=cores, bty="o", title="Percentual - 2000", cex=0.5)
sargentina2000@data$pnomes=pnomes
text(getSpPPolygonsLabptSlots(sargentina2000), labels=sargentina2000@data$pnomes, cex=0.45)
library(maps)
map.scale(x=-63, y=-52,relwidth=0.03,metric=T,ratio=T,cex=0.45)
source(compassRose(-60,-47))
#mapa 2015
sargentina2015=argentina
sargentina2015$per2015=sojar$per2015
sargentina2015$cor[sargentina2015$per2015<=0.1]="palegreen"
sargentina2015$cor[sargentina2015$per2015>=1&sargentina2015$per2015<=3]="greenyellow"
sargentina2015$cor[sargentina2015$per2015>=4&sargentina2015$per2015<=8]="green2"
sargentina2015$cor[sargentina2015$per2015==16.3]="springgreen3"
sargentina2015$cor[sargentina2015$per2015==27.4]="olivedrab3"
sargentina2015$cor[sargentina2015$per2015==33.3]="darkgreen"
plot(sargentina2015,border=T,lwd=.5,axes=F,las=1,col=sargentina2015$cor)
legenda=as.character(c("0%","0% a 3%","4% a 8%","16%","27%","33%"))
cores=as.character((c("palegreen","greenyellow","green2","springgreen3","olivedrab3","darkgreen")))
legend(x=-56,y=-30, legenda, fill=cores, bty="o", title="Percentual - 2015", cex=0.5)
sargentina2015@data$pnomes=pnomes
text(getSpPPolygonsLabptSlots(sargentina2015), labels=sargentina2015@data$pnomes, cex=0.45)
library(maps)
map.scale(x=-63, y=-52,relwidth=0.03,metric=T,ratio=T,cex=0.45)
source(compassRose(-60,-47))
library(maptools)
estados=readShapeSpatial("/home/bmiyamoto/Documentos/Pesquisa/Glaucia/Shapefiles/estados_2010/estados_2010.shp")
estados$ordem=1:dim(estados)[1]
#####Mapas Brasil
##Cana de açúcar
cana=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Glaucia/dados/cana_brasil.csv",header=T,sep=";")
cana=as.data.frame(cana[c(1:27),c(1,7,22,37)])
cana=cbind(cana[c(1)],sapply(cana[,c(2:4)], function(v) {as.numeric(gsub("\\.","", as.character(v)))}))
cana$per1985=round(((cana$X1985)/(sum(cana$X1985)))*100)
cana$per2000=round(((cana$X2000)/(sum(cana$X2000)))*100)
cana$per2015=round(((cana$X2015)/(sum(cana$X2015)))*100)
cana$var19852015=((cana$X2015/cana$X1985)-1)*100
cana=cana[order(cana$ESTADO.SAFRA),]
estados=estados[order(estados$nome),]
cana=cbind(estados[,c(3,6)],cana[,c(5:8)])
#mapa1985
cestados1985=estados
cestados1985@data=cbind(cestados1985@data,cana[,c(3)])
cestados1985@data$cor[cestados1985@data$`cana[, c(3)]`==0]="palegreen"
cestados1985@data$cor[cestados1985@data$`cana[, c(3)]`==1]="greenyellow"
cestados1985@data$cor[cestados1985@data$`cana[, c(3)]`>=2&cestados1985@data$`cana[, c(3)]`<=4]="green2"
cestados1985@data$cor[cestados1985@data$`cana[, c(3)]`>=5&cestados1985@data$`cana[, c(3)]`<=8]="springgreen3"
cestados1985@data$cor[cestados1985@data$`cana[, c(3)]`>=10&cestados1985@data$`cana[, c(3)]`<=12]="olivedrab3"
cestados1985@data$cor[cestados1985@data$`cana[, c(3)]`==42]="darkgreen"
cestados1985=cestados1985[order(cestados1985@data$ordem),]
plot(cestados1985,border=T,lwd=.5,axes=F,las=1,col=cestados1985@data$cor)
legenda=as.character(c("0% a 1%","1% a 2%","2% a 4%","5% a 8%","10% a 12%","42%"))
cores=as.character((c("palegreen","greenyellow","green2","springgreen3","olivedrab3","darkgreen")))
legend(x=-37,y=-12, legenda, fill=cores, bty="o", title="Percentual - 1985", cex=0.6)
#Plotar sigla ou nomes dos estados
text(getSpPPolygonsLabptSlots(cestados1985), labels=cestados1985@data$sigla, cex=0.7)
library(maps)
map.scale(x=-46.8, y=-31,relwidth=0.03,metric=T,ratio=T,cex=0.45)
source(compassRose(-43.8,-26.3))
bacias=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Bacias hidrográficas/BaciasHidrograficasSP.csv",
header=T)
View(bacias)
######################################################################
#####################################################################
#Modelo de dados em painel para culturas temporárias
#Tratamento do IPCA
ipca=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/IPCA/IPCA.csv",header=T)
ipca=ipca[c(15:36),c(1,2)]
colnames(ipca)[2]="IPCA"
ipca$V1=((ipca$IPCA/100)+1)
#Valores reais de 1994. Divido o valor monetário por esse número
ipca$V2[1]=1
ipca$V2[2]=ipca$V1[2]
for (i in 3:length(ipca$V1)){
ipca$V2[i]=(ipca$V2[i-1])*(ipca$V1[i])
}
#Valores reais de 2014. Multiplico o valor monetário po esse número
ipca$V3[22]=1
ipca$V3[21]=ipca$V1[21]
for(i in (length(ipca$V1)-2):1){
ipca$V3[i]=(ipca$V3[i+1])*(ipca$V1[i])
}
###carrega dados climáticos
#carrega dados anuais
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalanosp.RData")
#carrega dados por estação do ano
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalestsp.RData")
###Carrega dados de área e de valor da produção de culturas temporárias
areaculttemp=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Lavoura temporária/area_colhida_lavoura_temporaria.csv",
header=T,na.strings = c("-","NA"))
vculttemp=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Lavoura temporária/vptemporario.csv",
header=T, na.strings = c("-","NA"))
View(vculttemp)
View(climafinalestsp)
names(climafinalanosp)
ibgemun=climafinalanosp[,c(1,2)]
View(ibgemun)
ibgemun=climafinalanosp[,c(1,2,4)]
View(ibgemun)
ibgemun=climafinalanosp[climafinalanosp$Ano==2014,c(1,2,4)]
View(ibgemun)
bacias=bacias[order(bacias$nomemunic),]
View(bacias)
ibgemun=ibgemun[order(ibgemun$Municipio),]
bacia=cbind(bacia,ibgemun)
bacias=cbind(bacias,ibgemun)
View(bacias)
rm(list=ls())
###carrega dados climáticos
#carrega dados anuais
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalanosp.RData")
ibgemun=climafinalanosp[climafinalanosp$Ano==2014,c(1,2,4)]
ibgemun=ibgemun[order(ibgemun$Municipio),]
#Vou precisar fundir vculttemp com as bacias hidrográficas
bacias=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Bacias hidrográficas/BaciasHidrograficasSP.csv",
header=T)
bacias=bacias[order(bacias$nomemunic),]
bacias=cbind(bacias,ibgemun)
View(bacias)
names(bacia)
names(bacias)
head(bacias)
head(bacias[,c(4)])
head(bacias[c(4),])
head(bacias[,c(4)])
head(bacias)
head(bacias(,1:4))
head(bacias(,4))
head(bacias,4)
head(bacias,4,4)
head(bacias[,c(1:4)])
names(bacias)
head(bacias[,c(1:5)])
names(bacias)
bacias=bacias[,c(4,1,2,3)]
View(bacias)
bacias$Bacia[bacias$Codigobacia==9]="Mogi=Guaçu"
View(bacias)
###carrega dados climáticos
#carrega dados anuais
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalanosp.RData")
ibgemun=climafinalanosp[climafinalanosp$Ano==2014,c(1,2,4)]
ibgemun=ibgemun[order(ibgemun$Municipio),]
#Vou precisar fundir vculttemp com as bacias hidrográficas
bacias=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Bacias hidrográficas/BaciasHidrograficasSP.csv",
header=T)
bacias=bacias[order(bacias$nomemunic),]
bacias=cbind(bacias,ibgemun)
bacias=bacias[,c(4,1,2,3)]
View(bacias)
bacias$Bacia[bacias$Codigobacia==9]='Mogi=Guaçu'
bacias$Bacia[bacias$Codigobacia==9]="Mogi-Guaçu"
bacias$Bacia[bacias$Codigobacia==9]=c("Mogi-Guaçu")
bacias$Bacia[bacias$Codigobacia==9]=2
bacias$Bacia[bacias$Codigobacia==9]=as.character("a")
str(bacias)
bacias$Bacia[bacias$Codigobacia==9]=as.factor("a")
View(bacias)
bacias$Bacia[bacias$Codigobacia==9,]=as.factor("a")
###carrega dados climáticos
#carrega dados anuais
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalanosp.RData")
ibgemun=climafinalanosp[climafinalanosp$Ano==2014,c(1,2,4)]
ibgemun=ibgemun[order(ibgemun$Municipio),]
#Vou precisar fundir vculttemp com as bacias hidrográficas
bacias=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Bacias hidrográficas/BaciasHidrograficasSP.csv",
header=T)
bacias=bacias[order(bacias$nomemunic),]
bacias=cbind(bacias,ibgemun)
bacias=bacias[,c(4,1,2,3)]
View(bacias)
setwd("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Bacias hidrográficas")
write.csv(bacias, file="baciamun", row.names=F)
rm(list=ls())
#Tratamento do IPCA
ipca=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/IPCA/IPCA.csv",header=T)
ipca=ipca[c(15:36),c(1,2)]
colnames(ipca)[2]="IPCA"
ipca$V1=((ipca$IPCA/100)+1)
#Valores reais de 1994. Divido o valor monetário por esse número
ipca$V2[1]=1
ipca$V2[2]=ipca$V1[2]
for (i in 3:length(ipca$V1)){
ipca$V2[i]=(ipca$V2[i-1])*(ipca$V1[i])
}
#Valores reais de 2014. Multiplico o valor monetário po esse número
ipca$V3[22]=1
ipca$V3[21]=ipca$V1[21]
for(i in (length(ipca$V1)-2):1){
ipca$V3[i]=(ipca$V3[i+1])*(ipca$V1[i])
}
###carrega dados climáticos
#carrega dados anuais
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalanosp.RData")
#carrega dados por estação do ano
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalestsp.RData")
###Carrega dados de área e de valor da produção de culturas temporárias
areaculttemp=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Lavoura temporária/area_colhida_lavoura_temporaria.csv",
header=T,na.strings = c("-","NA"))
vculttemp=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Lavoura temporária/vptemporario.csv",
header=T, na.strings = c("-","NA"))
###Padronização dos períodos da base de dados
vculttemp=vculttemp[vculttemp$Ano>=1994,]
ipca=ipca[ipca$Data<2015,]
climafinalanosp=climafinalanosp[climafinalanosp$Ano>=1994,]
climafinalanosp=climafinalanosp[,c(1,4:18)]
climafinalestsp=climafinalestsp[climafinalestsp$Ano>=1994,]
climafinalestsp=climafinalestsp[,c(1,3:59)]
#######Deflacionando série de dados
lvculttemp2=list()
lvculttemp=split(vculttemp, paste(vculttemp$Municipio))
for (i in 1:length(lvculttemp)){
temp=cbind(lvculttemp[[i]]$Municipio,lvculttemp[[i]]$Ano,lvculttemp[[i]]$VPTemporario/ipca$V2)
colnames(temp)=c("Municipio","Ano","VTReal")
lvculttemp2[[i]]=temp
}
vculttemp=do.call(rbind.data.frame,lvculttemp2)
vculttemp$logreal=log(vculttemp$VTReal)
vculttemp$logreal[!is.finite(vculttemp$logreal)]=NA
#Padronizando data de área colhida e aplicando log
areaculttemp=areaculttemp[areaculttemp$Ano>=1994,]
areaculttemp$logarea=log(areaculttemp$Area.Colhida)
areaculttemp$logarea[!is.finite(areaculttemp$logarea)]=NA
#merge tables
vculttemp=merge(vculttemp,areaculttemp,by.x=c('Municipio','Ano'),by.y=c('Município','Ano'))
vculttemp=merge(vculttemp,climafinalanosp, by.x=c('Municipio','Ano'),by.y=c('Codigo','Ano'),all.x=T,all.y=F)
vculttemp=merge(vculttemp,climafinalestsp, by.x=c('Municipio','Ano'),by.y=c('Codigo','Ano'),all.x=T,all.y=F)
bacias=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Bacias hidrográficas/baciamun",
header=T)
View(bacias)
View(vculttemp)
names(vculttemp)
names(bacias)
colnames(bacias)[1]="Municipio"
View(bacias)
vculttemp=merge(vculttemp,bacias, by.x=c('Municipio'), by.y=c('Municipio'),all.x=T,all.y=T)
View(vculttemp)
#O painel de dados tem que necessariamente ser balanceado para que eu consiga fazer regressão espacial.
#o que eu posso fazer é deixar apenas os municípios presentes em todos os anos da série
lvculttemp=split(vculttemp,paste(vculttemp$Municipio))
lvculttemp2=list()
j=1
for (i in 1:length(lvculttemp)){
lvculttemp[[i]]$TesteNA=0
lvculttemp[[i]]$TesteNA[is.na(lvculttemp[[i]]$logreal)]=1
if(sum(lvculttemp[[i]]$TesteNA)==0){
lvculttemp2[j]=lvculttemp[i]
j=j+1
}
}
vculttemp=do.call(rbind.data.frame,lvculttemp2)
View(vculttemp)
###Tratar os shapefiles para trabalhar apenas com São Paulo
library(maptools)
#Malha de municípios
municipios=readShapeSpatial("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Shapefiles/municipios_2010/municipios_2010.shp")
#Selecionar apenas os municípios que pertencem ao estado de SP
spmunicipios=municipios
spmunicipios=spmunicipios[order(spmunicipios@data$uf),]
spmunicipios@data$Cod=1:length(municipios@data$id)
spmunicipios=spmunicipios[c(4781:5425),]
#Exlui Ilha Bela do litoral de São Paulo. Com nã havia conexões com o continente
#estava dando problema na hora de criar a matrix de pesos.
spmunicipios2014=spmunicipios[c(1:12,14:645),]
munpanel=vculttemp[vculttemp$Ano==2014,]
#Não vai ser só ilha bela
#Tenho que excluir todos os municípios que não estão presentes no painel de dados
#Atribuindo 1 a variável bin para os elementos que estão presentes em munpanel e spmunicipios2014 simultaneamente
spmunicipios2014$bin=0
for (i in 1:length(spmunicipios2014$codigo_ibg)){
for (j in 1:length(munpanel$Municipio)){
if (spmunicipios2014$codigo_ibg[[i]]==munpanel$Municipio[[j]]){
spmunicipios2014$bin[[i]]=1
}
}
}
#Pegando em spmunicipios2014 apenas os elementos com valor de bin =1  e atribuindo novamente a spmunicipios2014
spmunicipios2014=spmunicipios2014[spmunicipios2014$bin==1,]
library(spdep)
#Cria neighbors por contiguidade
spneighbors=poly2nb(spmunicipios2014)
coords=coordinates(spmunicipios2014)
#Plotanto mapa de vizinhança
plot(spneighbors,coords,col="black")
#####Spatial weight matrix based on contiguity
weigthmatrix=nb2listw(spneighbors)
summary(weigthmatrix)
View(vculttemp)
names(vculttemp)
library(plm)
library(splm)
vculttemp=plm.data(vculttemp)
Y=cbind(vculttemp[,c(4)])
#melhor ajuste até o momento
#X=as.matrix(vculttemp[,c(11,8,10,13)])
#Problema com a binária 78
X=as.matrix(vculttemp[,c(8,10,13,32)])
fm=Y~X
######################
#Testes Lagrange multiplier
LM1=bsktest(x=fm,data=vculttemp,listw=weigthmatrix,test="LM1")
LM1
LM2=bsktest(x=fm,data=vculttemp,listw=weigthmatrix,test="LM2")
LM2
LMH=bsktest(x=fm,data=vculttemp,listw=weigthmatrix,test="LMH")
LMH
CLMlambda=bsktest(x=fm,data=vculttemp,listw=weigthmatrix,test="CLMlambda")
CLMlambda
##################
#Efeitos fixos e aleatórios não espacial + teste de hausmann
fe=plm(formula=fm,data=vculttemp,model="within")
summary(fe)
re=plm(formula=fm,data=vculttemp,model="random")
summary(re)
phtest(re, fe)
rm(list=ls())
######################################################################
#####################################################################
#Modelo de dados em painel para culturas permanentes
#Tratamento do IPCA
ipca=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/IPCA/IPCA.csv",header=T)
ipca=ipca[c(15:36),c(1,2)]
colnames(ipca)[2]="IPCA"
ipca$V1=((ipca$IPCA/100)+1)
#Valores reais de 1994. Divido o valor monetário por esse número
ipca$V2[1]=1
ipca$V2[2]=ipca$V1[2]
for (i in 3:length(ipca$V1)){
ipca$V2[i]=(ipca$V2[i-1])*(ipca$V1[i])
}
#Valores reais de 2014. Multiplico o valor monetário po esse número
ipca$V3[22]=1
ipca$V3[21]=ipca$V1[21]
for(i in (length(ipca$V1)-2):1){
ipca$V3[i]=(ipca$V3[i+1])*(ipca$V1[i])
}
###carrega dados climáticos
#carrega dados anuais
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalanosp.RData")
#carrega dados por estação do ano
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalestsp.RData")
#carrega dados de culturas permanentes
vcultperm=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Lavoura permanente/vppermanente.csv",
header=T,na.strings=c("-","NA"))
###Padronização dos períodos da base de dados
vcultperm=vcultperm[vcultperm$Ano>=1994,]
ipca=ipca[ipca$Data<2015,]
climafinalanosp=climafinalanosp[climafinalanosp$Ano>=1994,]
climafinalanosp=climafinalanosp[,c(1,4:18)]
climafinalestsp=climafinalestsp[climafinalestsp$Ano>=1994,]
climafinalestsp=climafinalestsp[,c(1,3:59)]
#######Deflacionando série de dados
lvcultperm2=list()
lvcultperm=split(vcultperm, paste(vcultperm$Município))
for (i in 1:length(lvcultperm)){
perm=cbind(lvcultperm[[i]]$Município,lvcultperm[[i]]$Ano,lvcultperm[[i]]$VPPermanente/ipca$V2)
colnames(perm)=c("Municipio","Ano","VPReal")
lvcultperm2[[i]]=perm
}
vcultperm=do.call(rbind.data.frame,lvcultperm2)
vcultperm$logreal=log(vcultperm$VPReal)
vcultperm$logreal[!is.finite(vcultperm$logreal)]=NA
#merge tables
vcultperm=merge(vcultperm,climafinalanosp, by.x=c('Municipio','Ano'),by.y=c('Codigo','Ano'),all.x=T,all.y=F)
vcultperm=merge(vcultperm,climafinalestsp, by.x=c('Municipio','Ano'),by.y=c('Codigo','Ano'),all.x=T,all.y=F)
View(vcultperm)
names(vcultperm)
#Inclusão das bacias hidrográficas
bacias=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Bacias hidrográficas/baciamun",
header=T)
colnames(bacias)[1]="Municipio"
vculttemp=merge(vcultperm,bacias, by.x=c('Municipio'), by.y=c('Municipio'),all.x=T,all.y=T)
rm(list=ls())
######################################################################
#####################################################################
#Modelo de dados em painel para culturas permanentes
#Tratamento do IPCA
ipca=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/IPCA/IPCA.csv",header=T)
ipca=ipca[c(15:36),c(1,2)]
colnames(ipca)[2]="IPCA"
ipca$V1=((ipca$IPCA/100)+1)
#Valores reais de 1994. Divido o valor monetário por esse número
ipca$V2[1]=1
ipca$V2[2]=ipca$V1[2]
for (i in 3:length(ipca$V1)){
ipca$V2[i]=(ipca$V2[i-1])*(ipca$V1[i])
}
#Valores reais de 2014. Multiplico o valor monetário po esse número
ipca$V3[22]=1
ipca$V3[21]=ipca$V1[21]
for(i in (length(ipca$V1)-2):1){
ipca$V3[i]=(ipca$V3[i+1])*(ipca$V1[i])
}
###carrega dados climáticos
#carrega dados anuais
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalanosp.RData")
#carrega dados por estação do ano
load("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Dados climáticos/climafinalestsp.RData")
#carrega dados de culturas permanentes
vcultperm=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Lavoura permanente/vppermanente.csv",
header=T,na.strings=c("-","NA"))
###Padronização dos períodos da base de dados
vcultperm=vcultperm[vcultperm$Ano>=1994,]
ipca=ipca[ipca$Data<2015,]
climafinalanosp=climafinalanosp[climafinalanosp$Ano>=1994,]
climafinalanosp=climafinalanosp[,c(1,4:18)]
climafinalestsp=climafinalestsp[climafinalestsp$Ano>=1994,]
climafinalestsp=climafinalestsp[,c(1,3:59)]
#######Deflacionando série de dados
lvcultperm2=list()
lvcultperm=split(vcultperm, paste(vcultperm$Município))
for (i in 1:length(lvcultperm)){
perm=cbind(lvcultperm[[i]]$Município,lvcultperm[[i]]$Ano,lvcultperm[[i]]$VPPermanente/ipca$V2)
colnames(perm)=c("Municipio","Ano","VPReal")
lvcultperm2[[i]]=perm
}
vcultperm=do.call(rbind.data.frame,lvcultperm2)
vcultperm$logreal=log(vcultperm$VPReal)
vcultperm$logreal[!is.finite(vcultperm$logreal)]=NA
#merge tables
vcultperm=merge(vcultperm,climafinalanosp, by.x=c('Municipio','Ano'),by.y=c('Codigo','Ano'),all.x=T,all.y=F)
vcultperm=merge(vcultperm,climafinalestsp, by.x=c('Municipio','Ano'),by.y=c('Codigo','Ano'),all.x=T,all.y=F)
#Inclusão das bacias hidrográficas
bacias=read.csv("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Bacias hidrográficas/baciamun",
header=T)
colnames(bacias)[1]="Municipio"
vcultperm=merge(vcultperm,bacias, by.x=c('Municipio'), by.y=c('Municipio'),all.x=T,all.y=T)
View(vcultperm)
#O painel de dados tem que necessariamente ser balanceado para que eu consiga fazer regressão espacial.
#o que eu posso fazer é deixar apenas os municípios presentes em todos os anos da série
lvcultperm=split(vcultperm,paste(vcultperm$Municipio))
lvcultperm2=list()
j=1
for (i in 1:length(lvcultperm)){
lvcultperm[[i]]$TesteNA=0
lvcultperm[[i]]$TesteNA[is.na(lvcultperm[[i]]$logreal)]=1
if(sum(lvcultperm[[i]]$TesteNA)==0){
lvcultperm2[j]=lvcultperm[i]
j=j+1
}
}
vcultperm=do.call(rbind.data.frame, lvcultperm2)
###Tratar os shapefiles para trabalhar apenas com São Paulo
library(maptools)
#Malha de municípios
municipios=readShapeSpatial("/home/bmiyamoto/Documentos/Pesquisa/Artigo VBPSP/Shapefiles/municipios_2010/municipios_2010.shp")
#Selecionar apenas os municípios que pertencem ao estado de SP
spmunicipios=municipios
spmunicipios=spmunicipios[order(spmunicipios@data$uf),]
spmunicipios@data$Cod=1:length(municipios@data$id)
spmunicipios=spmunicipios[c(4781:5425),]
#Exlui Ilha Bela do litoral de São Paulo. Com nã havia conexões com o continente
#estava dando problema na hora de criar a matrix de pesos.
spmunicipios2014=spmunicipios[c(1:12,14:645),]
#Não vai ser só ilha bela
#Tenho que excluir todos os municípios que não estão presentes no painel de dados
#Atribuindo 1 a variável bin para os elementos que estão presentes em munpanel e spmunicipios2014 simultaneamente
munpanel=vcultperm[vcultperm$Ano==2014,]
spmunicipios2014$bin=0
for (i in 1:length(spmunicipios2014$codigo_ibg)){
for (j in 1:length(munpanel$Municipio)){
if (spmunicipios2014$codigo_ibg[[i]]==munpanel$Municipio[[j]]){
spmunicipios2014$bin[[i]]=1
}
}
}
#Pegando em spmunicipios2014 apenas os elementos com valor de bin =1  e atribuindo novamente a spmunicipios2014
spmunicipios2014=spmunicipios2014[spmunicipios2014$bin==1,]
library(spdep)
#Cria neighbors por contiguidade
spneighbors=poly2nb(spmunicipios2014)
coords=coordinates(spmunicipios2014)
#Plotanto mapa de vizinhança
plot(spneighbors,coords,col="black")
#Tentei editar a lista para ligar pontos desconexos
#edit.nb(spneighbors,coords)
#####Spatial weight matrix based on contiguity
#Como não consegui editar usei o argumento zero policy
#nem edit.nb ou zero policy funcionaram
#Peo que eu entendi esse comando cria a matriz de pesos pelas coordenadas, ao invés de usar
#a vizinhança. Usa coordenadas a uma distânai de 45 km
weigthmatrix=dnearneigh(coords,0,45,longlat = T)
weigthmatrix=nb2listw(weigthmatrix)
summary(weigthmatrix)
names(vcultperm)
library(plm)
library(splm)
vcultperm=plm.data(vcultperm)
Y=as.matrix(vcultperm[,c(4)])
#melhor ajuste até o momento
X=as.matrix(vcultperm[,c(6,8,11,16)])
#Problema com a binária 78
#X=as.matrix(vculttemp[,c(11,8,10,13,78)])
fm=Y~X
######################
#Testes Lagrange multiplier
LM1=bsktest(x=fm,data=vcultperm,listw=weigthmatrix,test="LM1")
LM1
LM2=bsktest(x=fm,data=vcultperm,listw=weigthmatrix,test="LM2")
LM2
LMH=bsktest(x=fm,data=vcultperm,listw=weigthmatrix,test="LMH")
LMH
CLMlambda=bsktest(x=fm,data=vcultperm,listw=weigthmatrix,test="CLMlambda")
CLMlambda
###################
#Efeitos fixos e aleatórios não espacial + teste de hausmann
fe=plm(formula=fm,data=vcultperm,model="within")
summary(fe)
re=plm(formula=fm,data=vcultperm,model="random")
summary(re)
phtest(re, fe)
View(vcultperm)
